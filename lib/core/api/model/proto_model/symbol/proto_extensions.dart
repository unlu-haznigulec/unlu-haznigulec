import 'dart:typed_data';

import 'package:piapiri_v2/core/api/model/proto_model/symbol/symbol_model.dart';
import 'package:piapiri_v2/core/gen/Symbol/Symbol.pb.dart';

SymbolModel symbolBytesToPiapiri(Uint8List protoBytes) => SymbolMessage.fromBuffer(protoBytes.toList()).toPiapiri();

extension SymbolProtoParser on SymbolMessage {
  SymbolModel toPiapiri() => SymbolModel(
        symbolId: symbolId,
        symbolCode: symbolCode,
        symbolDesc: symbolDesc,
        updateDate: updateDate,
        bid: bid,
        ask: ask,
        low: low,
        high: high,
        last: last,
        dayClose: dayClose,
        fractionCount: fractionCount,
        dailyLow: dailyLow,
        dailyHigh: dailyHigh,
        quantity: quantity,
        volume: volume,
        difference: difference,
        differencePercent: differencePercent,
        days7DifPer: days7DifPer,
        days30DifPer: days30DifPer,
        week52DifPer: week52DifPer,
        monthHigh: monthHigh,
        monthLow: monthLow,
        yearHigh: yearHigh,
        yearLow: yearLow,
        priceMean: priceMean,
        limitUp: limitUp,
        limitDown: limitDown,
        netProceeds: netProceeds,
        priceProceeds: priceProceeds,
        marketValue: marketValue,
        marketValueUsd: marketValueUsd,
        marValBookVal: marValBookVal,
        equity: equity,
        capital: capital,
        circulationShare: circulationShare,
        circulationSharePer: circulationSharePer,
        symbolGroup: symbolGroup,
        dailyVolume: dailyVolume,
        sessionIsOpen: sessionIsOpen,
        openForTrade: openForTrade,
        priceStep: priceStep,
        basePrice: basePrice,
        symbolType: symbolType,
        tradeFraction: tradeFraction,
        stockSymbolCode: stockSymbolCode,
        tradeDate: tradeDate,
        open: open,
        dailyQuantity: dailyQuantity,
        actionType: actionType,
        brutSwap: brutSwap,
        totalTradeCount: totalTradeCount,
        lastQuantity: lastQuantity,
        weekLow: weekLow,
        weekHigh: weekHigh,
        weekClose: weekClose,
        monthClose: monthClose,
        yearClose: yearClose,
        period: period,
        shiftedNetProceed: shiftedNetProceed,
        askSize: askSize.toInt(),
        bidSize: bidSize.toInt(),
        eqPrice: eqPrice,
        eqQuantity: eqQuantity,
        eqRemainingBidQuantity: eqRemainingBidQuantity,
        eqRemainingAskQuantity: eqRemainingAskQuantity,
        prevYearClose: prevYearClose,
        direction: direction,
        weekPriceMean: weekPriceMean,
        monthPriceMean: monthPriceMean,
        yearPriceMean: yearPriceMean,
        beta100: beta100,
        cashNetDividend: cashNetDividend,
        dividendYield: dividendYield,
        stockStatus: stockStatus,
        hasSymbolId: hasSymbolId(),
        hasSymbolCode: hasSymbolCode(),
        hasSymbolDesc: hasSymbolDesc(),
        hasUpdateDate: hasUpdateDate(),
        hasBid: hasBid(),
        hasAsk: hasAsk(),
        hasLow: hasLow(),
        hasHigh: hasHigh(),
        hasLast: hasLast(),
        hasDayClose: hasDayClose(),
        hasEqRemainingBidQuantity: hasEqRemainingBidQuantity(),
        hasEqQuantity: hasEqQuantity(),
        hasDailyVolume: hasDailyVolume(),
        hasDailyLow: hasDailyLow(),
        hasDailyHigh: hasDailyHigh(),
        hasQuantity: hasQuantity(),
        hasVolume: hasVolume(),
        hasMonthHigh: hasMonthHigh(),
        hasMonthLow: hasMonthLow(),
        hasYearHigh: hasYearHigh(),
        hasYearLow: hasYearLow(),
        hasPriceMean: hasPriceMean(),
        hasLimitUp: hasLimitUp(),
        hasLimitDown: hasLimitDown(),
        hasNetProceeds: hasNetProceeds(),
        hasEquity: hasEquity(),
        hasCapital: hasCapital(),
        hasCirculationShare: hasCirculationShare(),
        hasCirculationSharePer: hasCirculationSharePer(),
        hasSymbolGroup: hasSymbolGroup(),
        hasPriceStep: hasPriceStep(),
        hasBasePrice: hasBasePrice(),
        hasTradeDate: hasTradeDate(),
        hasOpen: hasOpen(),
        hasDailyQuantity: hasDailyQuantity(),
        hasActionType: hasActionType(),
        hasBrutSwap: hasBrutSwap(),
        hasLastQuantity: hasLastQuantity(),
        hasWeekLow: hasWeekLow(),
        hasWeekHigh: hasWeekHigh(),
        hasWeekClose: hasWeekClose(),
        hasMonthClose: hasMonthClose(),
        hasYearClose: hasYearClose(),
        hasPeriod: hasPeriod(),
        hasShiftedNetProceed: hasShiftedNetProceed(),
        hasAskSize: hasAskSize(),
        hasBidSize: hasBidSize(),
        hasEqPrice: hasEqPrice(),
        hasEqRemainingAskQuantity: hasEqRemainingAskQuantity(),
        hasPrevYearClose: hasPrevYearClose(),
        hasWeekPriceMean: hasWeekPriceMean(),
        hasMonthPriceMean: hasMonthPriceMean(),
        hasYearPriceMean: hasYearPriceMean(),
        hasBeta100: hasBeta100(),
        hasCashNetDividend: hasCashNetDividend(),
        hasStockStatus: hasStockStatus(),
        incrementalQuantity: incrementalQuantity,
        publishReason: publishReason,
        xu030Weight: xu030Weight,
        xu050Weight: xu050Weight,
        xu100Weight: xu100Weight,
      );
}
