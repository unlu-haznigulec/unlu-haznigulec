# Uncomment this line to define a global platform for your project
# platform :ios, '14.0'
use_frameworks!
# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  pod 'Toaster'
  pod 'IQKeyboardManagerSwift', '6.5.16'
  pod 'EnVerify', '1.3.18.3'
  
#  $FirebaseAnalyticsWithoutAdIdSupport = false
end

 target 'InsiderNotificationContent' do
   inherit! :search_paths

   # Pods for InsiderNotificationContent
   pod "InsiderMobileAdvancedNotification"
 end

 target 'InsiderNotificationService' do
   inherit! :search_paths

   # Pods for InsiderNotificationService
   pod "InsiderMobileAdvancedNotification"
 end

def remove_duplicated_frameworks(app_pod_name, installer)
  test_targets = get_test_targets(app_pod_name, installer)
  puts "Detected test targets: #{test_targets}"

  puts "Removing duplicated frameworks from OTHER_LDFLAGS"
  targets = installer.aggregate_targets.select { |x| !test_targets.include?(x.name) }
  puts " targets: #{targets}"
  # Checks each pair of targets if they have common pods. Duplicates are removed from the first one's xcconfig.
  for i in 0..targets.size-1 do
      target = targets[i]
      puts " target: #{target}"
      remainingAppPodTargets = target.pod_targets
      puts " remainingAppPodTargets: #{remainingAppPodTargets}"
      target.xcconfigs.each do |config_name, config_file|
          # Removes all frameworks which exist in other pods
         
          remainingAppPodTargets
              .flat_map {|pod_target| get_framework_names(pod_target)}
              .each { |framework| config_file.frameworks.delete(framework) }
             
          # Saves updated xcconfig
          xcconfig_path = target.xcconfig_path(config_name)
          config_file.save_as(xcconfig_path)
      end
  end
end

def get_test_targets(app_pod_name, installer)
  main_target_name = app_pod_name.gsub("Pods-", "")

  installer.aggregate_targets
      .find { |x| x.name == app_pod_name }
      .user_project
      .targets
      .select { |x| x.test_target_type? }
      .flat_map { |x| ["Pods-#{x}", "Pods-#{main_target_name}-#{x}"] }
      .select { |x| installer.aggregate_targets.map(&:name).include?(x) }
      .uniq
end

def get_framework_names(pod_target)
  frameworkNames = pod_target.specs.flat_map do |spec|
      # We should take framework names from 'vendored_frameworks'.
      # If it's not defined, we use 'spec.name' instead.
      #
      # spec.name can be defined like Framework/Something - we take the first part
      # because that's what appears in OTHER_LDFLAGS.
      puts " spec: #{spec}"
      frameworkPaths = unless spec.attributes_hash['ios'].nil?
          then spec.attributes_hash['ios']['vendored_frameworks']
          else spec.attributes_hash['vendored_frameworks']
          end || [spec.name.split(/\//, 2).first]

      map_paths_to_filenames(frameworkPaths)
  end

  frameworkNames.uniq
end

def map_paths_to_filenames(paths)
  Array(paths).map(&:to_s).map do |filename|
      extension = File.extname filename
      File.basename filename, extension
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ""
      config.build_settings['CODE_SIGNING_REQUIRED'] = "NO"
      config.build_settings['CODE_SIGNING_ALLOWED'] = "NO"
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'No'
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = 'arm64'

      # config.build_settings['VALID_ARCHS'] = "arm64 x86_64"
    end
    flutter_additional_ios_build_settings(target)
  end
  installer.aggregate_targets.each do |target|
    target.xcconfigs.each do |variant, xcconfig|
    xcconfig_path = target.client_root + target.xcconfig_relative_path(variant)
    IO.write(xcconfig_path, IO.read(xcconfig_path).gsub("DT_TOOLCHAIN_DIR", "TOOLCHAIN_DIR"))
    end
  end
  remove_duplicated_frameworks('Pods-Runner', installer)
end
